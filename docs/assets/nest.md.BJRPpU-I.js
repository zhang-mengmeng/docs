import{_ as a,c as n,a2 as i,o as p}from"./chunks/framework.DD8U72qy.js";const c=JSON.parse('{"title":"nest","description":"","frontmatter":{"outline":"deep","prev":{"text":"websocked","link":"/ws"},"next":{"text":"seo(搜索引擎优化)","link":"/seo"}},"headers":[],"relativePath":"nest.md","filePath":"nest.md","lastUpdated":1731416323000}'),e={name:"nest.md"};function t(l,s,h,r,k,d){return p(),n("div",null,s[0]||(s[0]=[i(`<h1 id="nest" tabindex="-1">nest <a class="header-anchor" href="#nest" aria-label="Permalink to &quot;nest&quot;">​</a></h1><h2 id="nuxtjs-nextjs-nestjs-区别" tabindex="-1">nuxtjs nextjs nestjs 区别 <a class="header-anchor" href="#nuxtjs-nextjs-nestjs-区别" aria-label="Permalink to &quot;nuxtjs nextjs nestjs 区别&quot;">​</a></h2><p>nuxtjs 是 Vue 的 SSR 框架</p><p>nextjs 是 React 的 SSR 框架</p><p>nestjs 是 Angular 的 SSR 框架</p><p>可以做 SSR 也可以做 server</p><p>nestjs 用的比较少的原因是没人带自己学比较难，Angular 国内又太少了</p><p>nestjs 跟 java springboot 一样的 人称小 spring</p><p>nestjs 是用 webpack 去构建的</p><p>nestjs 基于 Angular rxjs promise express fastify 组合而成</p><p>默认使用的是 express，一秒钟一万多请求，可以切换 fastify，一秒钟约等于五万请求。</p><p>一般的业务使用 express，网关层使用的是 fastify</p><p>&quot;$schema&quot;: &quot;<a href="https://json.schemastore.org/nest-cli" target="_blank" rel="noreferrer">https://json.schemastore.org/nest-cli</a>&quot;, 为 JSON 文件生成代码提示</p><h2 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h2><p>装饰器有四种 类装饰器 属性装饰器 方法装饰器 参数装饰器</p><p>在不修改 class 内部代码的基础上为之添加功能，在装饰器上可以拿到类的 prototype</p><p>不破坏原有的代码而为其添加功能</p><h2 id="代码解释" tabindex="-1">代码解释 <a class="header-anchor" href="#代码解释" aria-label="Permalink to &quot;代码解释&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//一启动项目项目就会执行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//MVC M Module V view视图层 C controllers路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//启动模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  controllers: [AppController], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [AppService], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//逻辑层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//控制路由的名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> appService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//get请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.appService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="命令解释" tabindex="-1">命令解释 <a class="header-anchor" href="#命令解释" aria-label="Permalink to &quot;命令解释&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nest g --help 查看所有命令</span></span>
<span class="line"><span>    │ application   │ 在创建一个nest项目，并且通过workspace去关联起来</span></span>
<span class="line"><span>    │ class         │ 创建一个类</span></span>
<span class="line"><span>    │ configuration │ 创建配置文件</span></span>
<span class="line"><span>    │ controller    │ 创建controller文件</span></span>
<span class="line"><span>    │ decorator     │ 创建自定义装饰器</span></span>
<span class="line"><span>    │ filter        │ 创建过滤器</span></span>
<span class="line"><span>    │ gateway       │ 创建网关层的demo</span></span>
<span class="line"><span>    │ guard         │ 守卫</span></span>
<span class="line"><span>    │ interceptor   │ nest的拦截器，所有的出入口都会经过</span></span>
<span class="line"><span>    │ interface     │ 创建声明文件</span></span>
<span class="line"><span>    │ library       │ 开发库模式 非业务的功能</span></span>
<span class="line"><span>    │ middleware    │ 中间键 跟express一样</span></span>
<span class="line"><span>    │ module        │ mo          │ Generate a module declaration                │</span></span>
<span class="line"><span>    │ pipe          │ 管道</span></span>
<span class="line"><span>    │ provider      │ 依赖注入</span></span>
<span class="line"><span>    │ resolver      │ GraphQL 写代码的风格，比较老，会增加前端的工作量，前端需要查什么需要在自己写</span></span>
<span class="line"><span>    │ resource      │ 帮我快速编写resource风格</span></span>
<span class="line"><span>    │ service       │ 创建逻辑层文件</span></span>
<span class="line"><span>    │ sub-app       │ 创建子应用，相当于微前端</span></span></code></pre></div><h2 id="文件分层" tabindex="-1">文件分层 <a class="header-anchor" href="#文件分层" aria-label="Permalink to &quot;文件分层&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dto //对象管理层 对象转换层</span></span>
<span class="line"><span>create-user.dto.ts // 创建验证</span></span>
<span class="line"><span>update-user.dto //更改验证 通过PartialType让里面的参数非必填</span></span>
<span class="line"><span>entities //实体层 创建数据表</span></span></code></pre></div><h2 id="uuid和cuid的区别" tabindex="-1">uuid和cuid的区别 <a class="header-anchor" href="#uuid和cuid的区别" aria-label="Permalink to &quot;uuid和cuid的区别&quot;">​</a></h2><p>uuid 通过mac地址 + 随机数 + 时间戳 生成 分布式集群管理</p><p>cuid web开发者推荐 轻量级 唯一 高效 安全 无敌</p>`,26)]))}const g=a(e,[["render",t]]);export{c as __pageData,g as default};
