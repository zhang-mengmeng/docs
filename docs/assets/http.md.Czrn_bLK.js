import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.DD8U72qy.js";const k=JSON.parse('{"title":"SEO(搜索引擎优化)","description":"","frontmatter":{"outline":"deep","prev":{"text":"express基本使用","link":"/express.md"},"next":{"text":"http协商缓存和强缓存","link":"/cache.md"}},"headers":[],"relativePath":"http.md","filePath":"http.md","lastUpdated":1731863344000}'),l={name:"http.md"};function o(n,s,d,h,r,p){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="seo-搜索引擎优化" tabindex="-1">SEO(搜索引擎优化) <a class="header-anchor" href="#seo-搜索引擎优化" aria-label="Permalink to &quot;SEO(搜索引擎优化)&quot;">​</a></h1><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>在 HTTP 协议中，请求头和响应头是客户端与服务器通信的重要组成部分。它们包含关于请求或响应的元数据。通常是以键值对的形式出现</p><h3 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;CORS&quot;">​</a></h3><p><strong>CORS</strong>（跨域资源共享）是一种机制，它使用额外的 HTTP 头来告诉浏览器让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p><h4 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h4><p>同源策略是指浏览器限制网页与不同域名、协议、端口的资源进行交互。<strong>同源</strong> 由三部分组成：</p><ul><li><strong>协议</strong>：<code>http</code>、<code>https</code></li><li><strong>域名</strong>：<code>www.baidu.com</code>、<code>www.google.com</code></li><li><strong>端口</strong>：<code>80</code>、<code>443</code></li></ul><h4 id="cors-相关-http-头部" tabindex="-1">CORS 相关 HTTP 头部 <a class="header-anchor" href="#cors-相关-http-头部" aria-label="Permalink to &quot;CORS 相关 HTTP 头部&quot;">​</a></h4><table tabindex="0"><thead><tr><th>头部</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td><code>*</code> 允许所有域名访问，或者指定具体域名</td><td>Access-Control-Allow-Origin: * <code>Access-Control-Allow-Origin: https://example.com</code></td></tr><tr><td>Access-Control-Allow-Methods</td><td>指定允许的方法，如<code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> <code>PATCH</code></td><td>指定允许的HTTP请求方法</td></tr><tr><td>Access-Control-Allow-Headers</td><td>允许客户端请求中使用的自定义头部。</td><td>Access-Control-Allow-Headers: Content-Type</td></tr><tr><td>Access-Control-Allow-Credentials</td><td>指示是否允许客户端发送带有认证信息（如 Cookies 或 HTTP 认证）到服务器。</td><td><code>Access-Control-Allow-Credentials</code>: <code>true</code></td></tr><tr><td>Access-Control-Expose-Headers</td><td>指定哪些响应头可以在浏览器的 JavaScript 中访问。</td><td><code>Access-Control-Expose-Headers</code>: <code>X-Custom-Header</code></td></tr></tbody></table><h4 id="cors-预检请求" tabindex="-1">CORS 预检请求 <a class="header-anchor" href="#cors-预检请求" aria-label="Permalink to &quot;CORS 预检请求&quot;">​</a></h4><ul><li><strong>预检请求的触发条件</strong></li></ul><ol><li>请求中使用非标准的 <code>Content-Type</code>: 如 <code>application/json</code></li><li>请求中包含自定义请求头：如 <code>X-Custom-Header</code>。</li><li>请求使用的方法不是简单方法：如 <code>PUT</code> <code>DELETE</code> <code>PATCH</code>。</li></ol><ul><li><ul><li>简单方法仅包括 <code>GET</code>、<code>POST</code>（且 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code> 或 <code>text/plain</code>）</li></ul></li></ul><h3 id="自定义响应头" tabindex="-1">自定义响应头 <a class="header-anchor" href="#自定义响应头" aria-label="Permalink to &quot;自定义响应头&quot;">​</a></h3><p><code>自定义响应头</code> 是指服务器在 HTTP 响应中添加的非标准头，用来传递额外的信息，满足应用的特定需求。通过这些头部，服务器可以提供客户端所需的元信息、操作指导或状态信息。</p><h4 id="示例自定义响应头" tabindex="-1">示例自定义响应头 <a class="header-anchor" href="#示例自定义响应头" aria-label="Permalink to &quot;示例自定义响应头&quot;">​</a></h4><ul><li><strong>X-Custom-Header</strong>:自定义信息，例如 X-App-Version 用于标记应用的版本。</li><li><strong>X-Request-ID</strong>:用来跟踪请求的唯一标识符，便于日志和调试。</li></ul><h4 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Custom-Header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Custom Value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Request-ID&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456789&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Expose-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Custom-Header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Request-ID&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;发送POST请求成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,20)]))}const E=i(l,[["render",o]]);export{k as __pageData,E as default};
