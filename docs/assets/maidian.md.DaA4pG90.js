import{_ as a,c as i,a2 as e,o as n}from"./chunks/framework.DD8U72qy.js";const c=JSON.parse('{"title":"埋点","description":"","frontmatter":{"outline":"deep","prev":{"text":"seo(搜索引擎优化)","link":"/seo"},"next":{"text":"文档搭建(vitepress)","link":"/word"}},"headers":[],"relativePath":"maidian.md","filePath":"maidian.md","lastUpdated":1730128329000}'),t={name:"maidian.md"};function p(l,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="埋点" tabindex="-1">埋点 <a class="header-anchor" href="#埋点" aria-label="Permalink to &quot;埋点&quot;">​</a></h1><h2 id="pv-uv" tabindex="-1">PV UV <a class="header-anchor" href="#pv-uv" aria-label="Permalink to &quot;PV UV&quot;">​</a></h2><p>PV 页面的访问量 Page View 就是用户每次对网站访问的记录</p><p>UV 指的就是独立访问用户 一个IP 算一次</p><p>1.用户行为数据 收集页面的浏览量</p><p>2.用户性能评估 页面的加载时间，API调用延时的时间，错误日志</p><p>3.设备和环境 用户操作设备 操作系统 浏览器版本</p><p>4.用户属性数据 用户的ID 地理位置 用户的角色</p><p>总结:收集用户的隐私 优化性能体验 进行A/B业务决策</p><h2 id="版本号" tabindex="-1">版本号 <a class="header-anchor" href="#版本号" aria-label="Permalink to &quot;版本号&quot;">​</a></h2><p>版本号 1.0.0</p><p>第一个整体架构发生了改变</p><p>第二个新增功能</p><p>第三个修改bug</p><h2 id="灰度" tabindex="-1">灰度 <a class="header-anchor" href="#灰度" aria-label="Permalink to &quot;灰度&quot;">​</a></h2><p>软件 App 小满科技 1.0.0 -&gt; 2.0.0 都没问题才全量发布</p><p>收集用户报错信息，监控</p><h2 id="vite-webpack区别" tabindex="-1">vite webpack区别 <a class="header-anchor" href="#vite-webpack区别" aria-label="Permalink to &quot;vite webpack区别&quot;">​</a></h2><p>webpack npm run dev 先给你打包一次 webpack 入口文件 js</p><p>vite npm run dev <code>no bundle模式</code> 他启动不需要打包 入口文件是html 原生esm</p><p>type=&#39;module&#39; 可以使用import</p><p>type=&#39;module&#39; 他会发起http请求</p><p>vite拦截处理里面的逻辑 koa的中间件去拦截了type=&#39;module&#39;</p><p>vite esbuild开发模式 rollupDown rust版本的rollup babel swc/rust 是babel的70倍</p><h2 id="调用接口的几种方式" tabindex="-1">调用接口的几种方式 <a class="header-anchor" href="#调用接口的几种方式" aria-label="Permalink to &quot;调用接口的几种方式&quot;">​</a></h2><p>axios fetch xhr 缺点关闭页面的时候接口就停止了</p><p>navigator.sendBeacon 优点就是关闭页面 接口也会走完 缺点 不支持跨域 不支持JSON</p><h2 id="获取" tabindex="-1">获取 <a class="header-anchor" href="#获取" aria-label="Permalink to &quot;获取&quot;">​</a></h2><p>navigator.userAgent 获取浏览器信息</p><p>new Data().getTime() // 获取时间戳</p><p>Object.assign({}, obj1, obj2) // 融合两个对象</p><p>e.target // 获取元素</p><p>Object.keys // 获取对象的key</p><p>getAttribute // 获取元素里面属性的值</p><p>getBoundingClientRect() // 获取按钮的位置</p><p>unhandledrejection() // 获取reject报错</p><p>MutationObserver() // 监听dom变化</p><p>subtree: true, // 监听后代变化</p><p>childList //监听增删改查</p><p>performance.now() // 获取时间戳</p><h2 id="http-规则" tabindex="-1">http 规则 <a class="header-anchor" href="#http-规则" aria-label="Permalink to &quot;http 规则&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Origin  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错：跨域 * 允许所有 也可以指定IP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Credentials  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许携带cookie 在谷歌浏览器95版本之后不允许cookie跨域</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> not allowed by Access-Control-Allow-Headers  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Type  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cors 只能允许我们发送普通的请求 URLSearchParams text  formData</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">前端的cookie就是后端的session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* 是不允许上传cookie 后端丢失了session</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options 预检</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1.跨域会有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2.自定义请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3.post并且是application/json 非普通请求</span></span></code></pre></div><h2 id="vue路由" tabindex="-1">vue路由 <a class="header-anchor" href="#vue路由" aria-label="Permalink to &quot;vue路由&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue 路由模式 hash  history</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hash 通过hashchange 事件来监听路由变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history 通过popstate 事件来监听路由变化</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.addEventListener </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发布订阅</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">自己提供</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event2131231&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dispatchEvent()</span></span></code></pre></div>`,45)]))}const E=a(t,[["render",p]]);export{c as __pageData,E as default};
